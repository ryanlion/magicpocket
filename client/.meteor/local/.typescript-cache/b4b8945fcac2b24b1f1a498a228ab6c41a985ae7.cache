{"code":"\"use strict\";\r\nconst meteor_1 = require(\"meteor/meteor\");\r\nconst tmeasday_publish_counts_1 = require(\"meteor/tmeasday:publish-counts\");\r\nconst parties_collection_1 = require(\"../../../both/collections/parties.collection\");\r\nmeteor_1.Meteor.publish('parties', function (options, location) {\r\n    const selector = buildQuery.call(this, null, location);\r\n    tmeasday_publish_counts_1.Counts.publish(this, 'numberOfParties', parties_collection_1.Parties.collection.find(selector), { noReady: true });\r\n    return parties_collection_1.Parties.find(selector, options);\r\n});\r\nmeteor_1.Meteor.publish('party', function (partyId) {\r\n    return parties_collection_1.Parties.find(buildQuery.call(this, partyId));\r\n});\r\nfunction buildQuery(partyId, location) {\r\n    const isAvailable = {\r\n        $or: [{\r\n                // party is public\r\n                public: true\r\n            },\r\n            // or\r\n            {\r\n                // current user is the owner\r\n                $and: [{\r\n                        owner: this.userId\r\n                    }, {\r\n                        owner: {\r\n                            $exists: true\r\n                        }\r\n                    }]\r\n            },\r\n            {\r\n                $and: [\r\n                    { invited: this.userId },\r\n                    { invited: { $exists: true } }\r\n                ]\r\n            }]\r\n    };\r\n    if (partyId) {\r\n        return {\r\n            // only single party\r\n            $and: [{\r\n                    _id: partyId\r\n                },\r\n                isAvailable\r\n            ]\r\n        };\r\n    }\r\n    const searchRegEx = { '$regex': '.*' + (location || '') + '.*', '$options': 'i' };\r\n    return {\r\n        $and: [{\r\n                'location.name': searchRegEx\r\n            },\r\n            isAvailable\r\n        ]\r\n    };\r\n}\r\n//# sourceMappingURL=parties.js.map","sourceMap":{"version":3,"file":"parties.js","sourceRoot":"","sources":["server/imports/publications/parties.ts"],"names":[],"mappings":";AAAA,0CAAuC;AACvC,4EAAwD;AAExD,qFAAuE;AAMvE,eAAM,CAAC,OAAO,CAAC,SAAS,EAAE,UAAS,OAAgB,EAAE,QAAiB;IACpE,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEvD,gCAAM,CAAC,OAAO,CAAC,IAAI,EAAE,iBAAiB,EAAE,4BAAO,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAE9F,MAAM,CAAC,4BAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AAEH,eAAM,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,OAAe;IAC9C,MAAM,CAAC,4BAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC;AAGH,oBAAoB,OAAgB,EAAE,QAAiB;IACrD,MAAM,WAAW,GAAG;QAClB,GAAG,EAAE,CAAC;gBACJ,kBAAkB;gBAClB,MAAM,EAAE,IAAI;aACb;YACD,KAAK;YACL;gBACE,4BAA4B;gBAC5B,IAAI,EAAE,CAAC;wBACL,KAAK,EAAE,IAAI,CAAC,MAAM;qBACnB,EAAE;wBACD,KAAK,EAAE;4BACL,OAAO,EAAE,IAAI;yBACd;qBACF,CAAC;aACH;YACD;gBACE,IAAI,EAAE;oBACJ,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE;oBACxB,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;iBAC/B;aACF,CAAC;KACH,CAAC;IAEF,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC;YACL,oBAAoB;YACpB,IAAI,EAAE,CAAC;oBACH,GAAG,EAAE,OAAO;iBACb;gBACD,WAAW;aACZ;SACF,CAAC;IACJ,CAAC;IAED,MAAM,WAAW,GAAG,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;IAElF,MAAM,CAAC;QACL,IAAI,EAAE,CAAC;gBACH,eAAe,EAAE,WAAW;aAC7B;YACD,WAAW;SACZ;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Counts } from 'meteor/tmeasday:publish-counts';\n\nimport { Parties } from '../../../both/collections/parties.collection';\n\ninterface Options {\n  [key: string]: any;\n}\n\nMeteor.publish('parties', function(options: Options, location?: string) {\n  const selector = buildQuery.call(this, null, location);\n\n  Counts.publish(this, 'numberOfParties', Parties.collection.find(selector), { noReady: true });\n\n  return Parties.find(selector, options);\n});\n\nMeteor.publish('party', function(partyId: string) {\n  return Parties.find(buildQuery.call(this, partyId));\n});\n\n\nfunction buildQuery(partyId?: string, location?: string): Object {\n  const isAvailable = {\n    $or: [{\n      // party is public\n      public: true\n    },\n    // or\n    { \n      // current user is the owner\n      $and: [{\n        owner: this.userId \n      }, {\n        owner: {\n          $exists: true\n        }\n      }]\n    },\n    {\n      $and: [\n        { invited: this.userId },\n        { invited: { $exists: true } }\n      ]\n    }]\n  };\n\n  if (partyId) {\n    return {\n      // only single party\n      $and: [{\n          _id: partyId\n        },\n        isAvailable\n      ]\n    };\n  }\n\n  const searchRegEx = { '$regex': '.*' + (location || '') + '.*', '$options': 'i' };\n\n  return {\n    $and: [{\n        'location.name': searchRegEx\n      },\n      isAvailable\n    ]\n  };\n}"]},"version":"1","isExternal":true,"dependencies":{"modules":["both/collections/parties.collection.ts"],"refFiles":[],"refTypings":[],"mappings":{"../../../both/collections/parties.collection":{"resolvedPath":"both/collections/parties.collection","external":false}}},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2307,"fileName":"server/imports/publications/parties.ts","message":"Cannot find module 'meteor/meteor'.","line":1,"column":24}]},"hash":"b4b8945fcac2b24b1f1a498a228ab6c41a985ae7"}